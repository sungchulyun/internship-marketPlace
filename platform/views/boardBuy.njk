<!DOCTYPE html>
<html lang="ko">

<head>
	<meta charset="UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>NFT 구매페이지입니다.</title>
	{% block js %}
	<script>
	let account;
	let mintIndexForSale = 0;
	let maxSaleAmount = 0;
	let mintPrice = 0;
	let mintStartBlockNumber = 0;
	let mintLimitPerBlock = 0;

	let blockNumber = 0;
	let blockCnt = false;

	function cntBlockNumber() {
		if(!blockCnt) {
			setInterval(function(){
				blockNumber+=1;
				document.getElementById("blockNubmer").innerHTML = "현재 블록: #" + blockNumber;
			}, 1000);
			blockCnt = true;
		}
	}

    //지갑 연동
	async function connect() {
		const accounts = await klaytn.enable();
		if (klaytn.networkVersion === 8217) {
			console.log("메인넷");
		} else if (klaytn.networkVersion === 1001) {
			console.log("테스트넷");
		} else {
			alert("ERROR: 클레이튼 네트워크로 연결되지 않았습니다!");
			return;
		}
		account = accounts[0];
		caver.klay.getBalance(account)
			.then(function (balance) {
				document.getElementById("myWallet").innerHTML = `지갑주소: ${account}`
				document.getElementById("myKlay").innerHTML = `잔액: ${caver.utils.fromPeb(balance, "KLAY")} KLAY`
			});
		await check_status();
	}

	async function check_status() {
		const myContract = new caver.klay.Contract(ABI, CONTRACTADDRESS);
		await myContract.methods.mintingInformation().call()
			.then(function (result) {
				console.log(result);
				mintIndexForSale = parseInt(result[1]);
				mintLimitPerBlock = parseInt(result[2]);
				mintStartBlockNumber = parseInt(result[4]);
				maxSaleAmount = parseInt(result[5]);
				mintPrice = parseInt(result[6]);
				document.getElementById("mintCnt").innerHTML = `${mintIndexForSale - 1} / ${maxSaleAmount}`;
				document.getElementById("mintLimitPerBlock").innerHTML = `트랜잭션당 최대 수량: ${mintLimitPerBlock}개`;
				document.getElementById('amount').max = mintLimitPerBlock;
				document.getElementById("mintStartBlockNumber").innerHTML = `민팅 시작 블록: #${mintStartBlockNumber}`;
				document.getElementById("mintPrice").innerHTML = `민팅 가격: ${caver.utils.fromPeb(mintPrice, "KLAY")} KLAY`;
			})
			.catch(function (error) {
				console.log(error);
			});
		blockNumber = await caver.klay.getBlockNumber();
		document.getElementById("blockNubmer").innerHTML = "현재 블록: #" + blockNumber;
		cntBlockNumber();
	}

	async function publicMint() {
		if (klaytn.networkVersion === 8217) {
			console.log("메인넷");
		} else if (klaytn.networkVersion === 1001) {
			console.log("테스트넷");
		} else {
			alert("ERROR: 클레이튼 네트워크로 연결되지 않았습니다!");
			return;
		}
		if (!account) {
			alert("ERROR: 지갑을 연결해주세요!");
			return;
		}

		const myContract = new caver.klay.Contract(ABI, CONTRACTADDRESS);
		const amount = document.getElementById('amount').value;
		await check_status();
		if (maxSaleAmount + 1 <= mintIndexForSale) {
			alert("모든 물량이 소진되었습니다.");
			return;
		} else if (blockNumber <= mintStartBlockNumber) {
			alert("아직 민팅이 시작되지 않았습니다.");
			return;
		}
		const total_value = BigNumber(amount * mintPrice);

		try {
			const gasAmount = await myContract.methods.publicMint(amount).estimateGas({
				from: account,
				gas: 6000000,
				value: total_value
			})
			const result = await myContract.methods.publicMint(amount).send({
				from: account,
				gas: gasAmount,
				value: total_value
			})
			if (result != null) {
				console.log(result);
				alert("민팅에 성공하였습니다.");
			}
		} catch (error) {
			console.log(error);
			alert("민팅에 실패하였습니다.");
		}
	}
	</script>
	<script src="public/config.js"></script>
	<script src="public/mintScript.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/bignumber.js/8.0.2/bignumber.js" 
	integrity="sha512-XQDG6H87RgMf+aNFwDPCUcFwUf3t9liyqN/2BkJ8KGixupbjPwQHNhypNA972mLIkg4KPo4lkGmqAf3yfDz8hw==" 
	crossorigin="anonymous" referrerpolicy="no-referrer"></script>
	{% endblock %}
	
</head>

<body>
	
	<h2>MY WALLET</h2>
	<button onclick="connect()">카이카스 지갑연결</button>
	<p id="myWallet">지갑주소: 연결되지 않음</p>
	<p id="myKlay">잔액: 연결되지 않음</p>
	<hr/>
	
	<script>
		document.addEventListener("DOMContentLoaded", async function (event) {
			const accounts = await klaytn.enable();
			if (!accounts) {
				alert("KaiKas 확장 프로그램을 활성화 해주세요!");
			}
			check_status();
		});
	</script>
	<form action="/boards/detailPro/{{board.id}}" method="post">
	 <button type="submit">전송 완료</button>
	</form>
</body>

</html>